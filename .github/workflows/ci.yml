name: CI

on:
  push:
    branches:
      - main
  pull_request: # This will trigger for PRs to main from forks and local branches
    branches:
      - main

jobs:
  lint_unit_build:
    name: Lint, Unit Test, and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'
      - name: Install dependencies
        run: pnpm install
      - name: Lint
        run: pnpm lint
      - name: Run Unit Tests
        run: pnpm test:unit
      - name: Build
        run: pnpm build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}

  e2e_tests:
    name: E2E Tests (vs Vercel)
    runs-on: ubuntu-latest
    needs: lint_unit_build
    if: >
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Install Vercel CLI
        run: sudo npm install -g vercel

      - name: Link Vercel Project
        run: vercel link --yes --token=${{ secrets.VERCEL_TOKEN }} --project=${{ secrets.VERCEL_PROJECT_ID }} --org=${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Get Vercel Deployment URL
        id: get_url
        run: |
          URL=""
          COMMIT_SHA="${{ github.event.pull_request.head.sha || github.sha }}"
          echo "Looking for Vercel deployment for commit: $COMMIT_SHA on project ${{ secrets.VERCEL_PROJECT_NAME }}"
          
          for i in {1..15}; do
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              DEPLOYMENT_ID=$(vercel ls ${{ secrets.VERCEL_PROJECT_NAME }} --token=${{ secrets.VERCEL_TOKEN }} --meta commitSha=${COMMIT_SHA} --state READY | tail -n 1 | awk '{print $1}')
              if [ -n "$DEPLOYMENT_ID" ] && [ "$DEPLOYMENT_ID" != "Found" ] && [ "$DEPLOYMENT_ID" != "No" ]; then
                 URL=$(vercel inspect $DEPLOYMENT_ID --token=${{ secrets.VERCEL_TOKEN }} | jq -r .url)
                 if [ -n "$URL" ] && [ "$URL" != "null" ]; then
                   echo "Preview URL found: $URL (Deployment ID: $DEPLOYMENT_ID)"
                   break
                 fi
              fi
            elif [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
              URL=$(vercel inspect --prod ${{ secrets.VERCEL_PROJECT_NAME }} --token=${{ secrets.VERCEL_TOKEN }} | jq -r .url)
              if [ -n "$URL" ] && [ "$URL" != "null" ]; then
                echo "Production URL found: $URL"
                break
              fi
            fi
            echo "Deployment URL not found yet for commit $COMMIT_SHA (attempt $i/15). Waiting 20 seconds..."
            sleep 20
          done

          if [ -z "$URL" ] || [ "$URL" == "null" ]; then
            echo "::error::Failed to retrieve Vercel deployment URL for commit $COMMIT_SHA on project ${{ secrets.VERCEL_PROJECT_NAME }} after multiple attempts."
            exit 1
          fi
          echo "url=https://$URL" >> $GITHUB_OUTPUT
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install test dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Playwright tests
        if: steps.get_url.outputs.url != ''
        env:
          PLAYWRIGHT_TARGET_URL: ${{ steps.get_url.outputs.url }}
        run: pnpm test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7 