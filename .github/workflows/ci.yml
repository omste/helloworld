name: CI/CD

# Production deployment pipeline
on:
  push:
    branches:
      - main

env:
  REGISTRY: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/helloworld-docker-repo
  IMAGE_NAME: nextjs-app

jobs:
  lint_unit_build:
    name: Lint, Unit Test, and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
            .next/cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Run Unit Tests
        run: pnpm test:unit

      - name: Build Next.js app
        run: pnpm build
        env:
          NEXT_TELEMETRY_DISABLED: 1

  deploy_to_cloud_run:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: lint_unit_build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'
          token_format: 'access_token'
          create_credentials_file: true

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install beta components
        run: gcloud components install beta --quiet

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_TELEMETRY_DISABLED=1

      - name: Prepare Grafana OTLP Header
        id: grafana_header
        run: echo "OTEL_EXPORTER_OTLP_HEADERS=Authorization=Basic $(echo -n '1260299:${{ secrets.GRAFANA_CLOUD_KEY }}' | base64)" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          SERVICE_URL=$(gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region ${{ secrets.CLOUD_RUN_REGION }} \
            --platform managed \
            --quiet \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,OTEL_TRACES_EXPORTER=otlp,OTEL_EXPORTER_OTLP_ENDPOINT=https://otlp-gateway-prod-gb-south-1.grafana.net/otlp,${{ env.OTEL_EXPORTER_OTLP_HEADERS }},OTEL_RESOURCE_ATTRIBUTES=service.name=${{ secrets.CLOUD_RUN_SERVICE_NAME }}\,service.namespace=helloworld\,deployment.environment=production,OTEL_NODE_RESOURCE_DETECTORS=env\,host\,os,NODE_OPTIONS=--require @opentelemetry/auto-instrumentations-node/register" \
            --min-instances=1 \
            --format='get(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Verify Deployment
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          until curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.service_url }}" | grep -q "200\|301\|302"; do
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to verify deployment after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "Waiting for service to be ready..."
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT+1))
          done
          echo "âœ… Service is ready at ${{ steps.deploy.outputs.service_url }}"
