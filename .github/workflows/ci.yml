name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint_unit_build:
    name: Lint, Unit Test, and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint
        run: pnpm lint
      - name: Run Unit Tests
        run: pnpm test:unit
      - name: Build Next.js app
        run: pnpm build

  deploy_and_e2e_tests:
    name: Deploy to Cloud Run & Run E2E Tests
    runs-on: ubuntu-latest
    needs: lint_unit_build
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev

      - name: Build and Push Docker image
        env:
          IMAGE_NAME: ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}:${{ github.sha }}
        run: |
          set -e
          echo "Attempting to use IMAGE_NAME: $IMAGE_NAME"
          docker build . -t $IMAGE_NAME
          docker push $IMAGE_NAME
          echo "Successfully built and pushed $IMAGE_NAME"

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          set -e
          echo "Deploying image: ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}:${{ github.sha }}"
          SERVICE_URL=$(gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE_NAME }} \
            --image ${{ secrets.CLOUD_RUN_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.CLOUD_RUN_SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ secrets.CLOUD_RUN_REGION }} \
            --platform managed \
            --quiet \
            --allow-unauthenticated \
            --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            --set-env-vars="UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }}" \
            --set-env-vars="UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }}" \
            --set-env-vars="PORT=3000" \
            --format='value(status.url)')
          
          if [ -z "$SERVICE_URL" ]; then
            echo "::error::Failed to get SERVICE_URL from Cloud Run deployment."
            exit 1
          fi
          
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Deployed to $SERVICE_URL"

      - name: Set up Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Set up pnpm for Playwright
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'
      - name: Get pnpm store directory (Playwright)
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache (Playwright)
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install Playwright dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Playwright tests
        if: steps.deploy.outputs.SERVICE_URL != ''
        env:
          PLAYWRIGHT_TARGET_URL: ${{ steps.deploy.outputs.SERVICE_URL }}
        run: |
          echo "Playwright tests will run against: $PLAYWRIGHT_TARGET_URL"
          pnpm test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7 